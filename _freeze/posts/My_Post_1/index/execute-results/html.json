{
  "hash": "ab32896f48ae1b7c0d3fbdb3a258a38f",
  "result": {
    "markdown": "---\ntitle: \"Samridhi Verma Post #1\"\nauthor: \"Samridhi Verma\"\ndate: \"2023-11-07\"\ncategories: [Covid, cases, data analysis]\nimage: \"image.jpg\"\n---\n\n\nThe source of the COVID-19 dataset used in this analysis is the \"Our World in Data\" project. The dataset can be accessed via the following URL:\n\n<https://covid.ourworldindata.org/data/owid-covid-data.csv>\n\nThis dataset is frequently updated and offers a wide range of information on COVID-19 cases, vaccinations, and more. Let's get started!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\ncovid_data <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 353810 Columns: 67\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): iso_code, continent, location, tests_units\ndbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(covid_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 67\n  iso_code continent location    date       total_cases new_cases\n  <chr>    <chr>     <chr>       <date>           <dbl>     <dbl>\n1 AFG      Asia      Afghanistan 2020-01-03          NA         0\n2 AFG      Asia      Afghanistan 2020-01-04          NA         0\n3 AFG      Asia      Afghanistan 2020-01-05          NA         0\n4 AFG      Asia      Afghanistan 2020-01-06          NA         0\n5 AFG      Asia      Afghanistan 2020-01-07          NA         0\n6 AFG      Asia      Afghanistan 2020-01-08          NA         0\n# ℹ 61 more variables: new_cases_smoothed <dbl>, total_deaths <dbl>,\n#   new_deaths <dbl>, new_deaths_smoothed <dbl>, total_cases_per_million <dbl>,\n#   new_cases_per_million <dbl>, new_cases_smoothed_per_million <dbl>,\n#   total_deaths_per_million <dbl>, new_deaths_per_million <dbl>,\n#   new_deaths_smoothed_per_million <dbl>, reproduction_rate <dbl>,\n#   icu_patients <dbl>, icu_patients_per_million <dbl>, hosp_patients <dbl>,\n#   hosp_patients_per_million <dbl>, weekly_icu_admissions <dbl>, …\n```\n:::\n:::\n\n\nWe've loaded our COVID-19 dataset and this dataset contains information about COVID-19 cases, vaccinations, and more. Let's take a quick look at the data to understand its structure. There are multiple different columns for instance the country, region, total number of deaths, number of vaccinated people, etc. This dataset possibly has everything everything we need to know and to analyze any COVID trends.\n\nBefore proceeding with our analysis, it's crucial to clean the data by removing any missing or inconsistent values. Let's start by checking for missing data and dealing with it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## data cleaning\nmissing_data <- covid_data %>% select(date, location, total_cases) %>%\n  filter(is.na(total_cases))\n\n# Remove rows with missing data\ncovid_data <- covid_data %>% filter(!is.na(total_cases))\n```\n:::\n\n\nWe have identified and removed rows with missing data to ensure the dataset is clean for analysis. Now, let's create some visualizations to better understand the COVID-19 cases. We'll start with a line plot to visualize the total cases over time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_data %>%\n  filter(location == \"World\") %>%\n  ggplot(aes(x = date, y = total_cases)) +\n  geom_line() +\n  labs(title = \"COVID-19 Total Cases Over Time\",\n       x = \"Date\",\n       y = \"Total Cases\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAs you can observe above, this line plot depicts the total number of cases in the world since 2020 and it has been increasing over time until 2023. The high peak we see is in the year 2021 which was also first the peak COVID year. And ever since then it has been in the upward trend. Additionally, since the numbers were really big hence we are seeing them in the logarithmic form so as to keep it concise. The plot is pretty intuitive and gives a good glimpse of COVID trend during the pandemic years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncovid_data %>%\n  filter(date == max(date)) %>%\n  arrange(desc(people_fully_vaccinated_per_hundred)) %>%\n  head(10) %>%\n  ggplot(aes(x = location, y = people_fully_vaccinated_per_hundred)) +\n  geom_bar(stat = \"identity\", fill = \"dodgerblue\") +\n  coord_flip() +\n  labs(title = \"Top 10 Countries by Fully Vaccinated Percentage\",\n       x = \"Country\",\n       y = \"Fully Vaccinated (%)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThis visualization here is a bar depicting the countries against the percentage of population vaccinated. For instance, we can see that Peru had most of its population vaccinated and India had the least amount of its population vaccinated. This is a good chart to understand whether a country's number of COVID cases correlated with their vaccination numbers or not. Additionally, it also provides a good idea of how well a country is doing in terms of providing healthcare services. However, one thing to note here is that these numbers/metrics can be a little deceiving as the size of India's population is way larger than Italy, Peru etc. So, ideally we cannot really compare their progress but it is a visualization to understand.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}